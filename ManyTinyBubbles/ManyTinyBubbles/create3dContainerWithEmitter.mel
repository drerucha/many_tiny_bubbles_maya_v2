

/***************
 * show window *
 ***************/

global proc showCreate3dContainerWithEmitterOptionsWindow()
{
	// TODO: add sliders for bubble min and max sizes

	////////////////////////////////////////////////////
	// constants
	////////////////////////////////////////////////////

	int $WINDOW_WIDTH = 600;
	int $WINDOW_HEIGHT = 400;

	int $button_height = getDefaultButtonHeight();

	float $default_res = getDefaultResolution();
	float $default_dim = getDefaultDimensions();
	float $default_fluid_fill_percentage = getDefaultFluidFillPercentage();

	float $default_emitter_radius = getDefaultEmitterRadius();
	int $default_emitter_rate = getDefaultEmissionRate();
	float $default_scattering_frequency = getDefaultScatteringFrequency();
	float $default_scattering_coefficient = getDefaultScatteringCoefficient();
	float $default_breakup_frequency = getDefaultBreakupFrequency();


	////////////////////////////////////////////////////
	// clear window if it already exists
	////////////////////////////////////////////////////

	if ( `window -exists create_3d_container_with_emitter_options_window` ) {
  		deleteUI create_3d_container_with_emitter_options_window;
		windowPref -remove create_3d_container_with_emitter_options_window;
	}


	////////////////////////////////////////////////////
	// create window
	////////////////////////////////////////////////////

	window -title "Create 3D Container with Emitter Options"
		   -width $WINDOW_WIDTH -height $WINDOW_HEIGHT
		   create_3d_container_with_emitter_options_window;
	    

	////////////////////////////////////////////////////
	// window container attributes
	////////////////////////////////////////////////////

	columnLayout -adjustableColumn true
				 -columnAttach "both" 10
				 -rowSpacing 5;

	// resolution sliders
	intSliderGrp -label "X resolution" -field true
				 -minValue 3 -maxValue 100
				 -fieldMinValue 3
				 -value $default_res
				 ui_res_x;
	intSliderGrp -label "Y resolution" -field true
				 -minValue 3 -maxValue 100
				 -fieldMinValue 3
				 -value $default_res
				 ui_res_y;
	intSliderGrp -label "Z resolution" -field true
				 -minValue 3 -maxValue 100
				 -fieldMinValue 3
				 -value $default_res
				 ui_res_z;

	// container dimension sliders
	floatSliderGrp -label "X size" -field true
				   -minValue 0.0 -maxValue 100.0
				   -fieldMinValue 0.0
				   -value $default_dim
				   ui_dim_x;
	floatSliderGrp -label "Y size" -field true
				   -minValue 0.0 -maxValue 100.0
				   -fieldMinValue 0.0
				   -value $default_dim
				   ui_dim_y;
	floatSliderGrp -label "Z size" -field true
				   -minValue 0.0 -maxValue 100.0
				   -fieldMinValue 0.0
				   -value $default_dim
				   ui_dim_z;

	// default fluid
	checkBox -label "Use default fluid"
			 -value true
			 ui_default_fluid_checkbox;
	floatSliderGrp -label "Fraction filled" -field true
				   -minValue 0.1 -maxValue 1.0
				   -fieldMinValue 0.1 -fieldMaxValue 1.0
				   -value $default_fluid_fill_percentage
				   ui_fill_fraction;


	////////////////////////////////////////////////////
	// bubble emitter attributes
	////////////////////////////////////////////////////

	floatSliderGrp -label "Emitter radius" -field true
				   -minValue 0.1 -maxValue 10.0
				   -fieldMinValue 0.1
				   -value $default_emitter_radius
				   ui_emitter_radius;

	intSliderGrp -label "Bubbles emitted per second" -field true
				 -minValue 1 -maxValue 1000.0
				 -fieldMinValue 1
				 -value $default_emitter_rate
				 ui_bubble_rate;

	floatSliderGrp -label "Scattering frequency (rate)" -field true
				   -minValue 0.0 -maxValue 1.0
				   -fieldMinValue 0.0 -fieldMaxValue 1.0
				   -value $default_scattering_frequency
				   ui_scattering_rate;

	floatSliderGrp -label "Scattering coefficient (direction)" -field true
				   -minValue -1.0 -maxValue 1.0
				   -fieldMinValue -1.0 -fieldMaxValue 1.0
				   -value $default_scattering_coefficient
				   ui_scattering_coeff;

	floatSliderGrp -label "Bubble breakup frequency" -field true
				   -minValue 0.0 -maxValue 1.0
				   -fieldMinValue 0.0 -fieldMaxValue 1.0
				   -value $default_breakup_frequency
				   ui_bubble_breakup;


	////////////////////////////////////////////////////
	// setup buttons + button commands
	////////////////////////////////////////////////////

	rowLayout -numberOfColumns 3
			  -columnWidth3 ( $WINDOW_WIDTH / 3 ) ( $WINDOW_WIDTH / 3 ) ( $WINDOW_WIDTH / 3 )
			  -columnAttach 1 "both" 0
			  -columnAttach 2 "both" 0
			  -columnAttach 3 "both" 0;
	button -label "Apply and Close"
		   -command "create3dContainerWithEmitter( true, true )"
		   -height $button_height;
	button -label "Apply"
		   -command "create3dContainerWithEmitter( true, false )"
		   -height $button_height;
	button -label "Close"
		   -command "deleteUI create_3d_container_with_emitter_options_window"
		   -height $button_height;
	

	////////////////////////////////////////////////////
	// show window
	////////////////////////////////////////////////////

	showWindow create_3d_container_with_emitter_options_window;

	mtbLog( "showed 3d container with emitter options window" );
}



/****************************************
 * create container with bubble emitter *
 ****************************************/

global proc create3dContainerWithEmitter( int $options_window_displayed, int $close_window )
{
	// TODO: move spherical emitter to bottom of fluid container


	////////////////////////////////////////////////////
	// query UI fields from options window
	////////////////////////////////////////////////////

	float $emitter_radius;

	if ( $options_window_displayed ) {
		$emitter_radius = `floatSliderGrp -query -value ui_emitter_radius`;
	}
	else {
		$emitter_radius = getDefaultEmitterRadius();
	}


	////////////////////////////////////////////////////
	// create 3D container
	////////////////////////////////////////////////////

	string $fluid_container = create3dContainer( $options_window_displayed, false );


	////////////////////////////////////////////////////
	// create bubble emitter
	////////////////////////////////////////////////////

	string $emitter_mesh = createEmitter( $emitter_radius );


	////////////////////////////////////////////////////
	// create node
	////////////////////////////////////////////////////

	createManyTinyBubblesNode( $fluid_container, $emitter_mesh, $options_window_displayed );


	////////////////////////////////////////////////////
	// optionally close options window
	////////////////////////////////////////////////////

	if ( `window -exists create_3d_container_with_emitter_options_window` && $close_window ) {
  		deleteUI create_3d_container_with_emitter_options_window;
		windowPref -remove create_3d_container_with_emitter_options_window;
	}

	mtbLog( "created 3d container with emitter" );
}



/*************************
 * create bubble emitter *
 *************************/

global proc string createEmitter( float $radius )
{
	string $emitter_mesh[] = `polySphere -radius $radius -subdivisionsX 20 -subdivisionsY 20 -axis 0 1 0 -createUVs 2 -constructionHistory 1`;

	mtbLog( "created spherical bubble emitter" );

	return $emitter_mesh[0];
}